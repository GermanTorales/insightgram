Class Node(){
    constructor(value){
        this.value = value
        this.next = null
    }
}

Class Stack(){
    constructor(){
        this.head = null
    }
}

Stack.prototype.push = (value)=>{
    if(!this.head){
        this.head = new Node(value)
    }else{
        let prevHead = this.head
        this.head = new Node(value)
        this.head.next = prevHead
    }
}

Stack.prototype.pop = ()=>{
    if(!this.head.next) return;
    else {
        let removedHead = this.head
        this.head = removedHead.next
        return removedHead.value
    }
}

Stack.prototype.headValue = () =>{
    if(!this.head) return;
    else return this.head.value
}

Class Min extends Stack{
    constructor(){
        super()
        this.min = new Stack()
    }
}

Min.prototype.push = (value)=>{
    if(!this.head) {
        this.head = new Node(value)
        this.min.push(value)
    }
    else{
        let prevHead = this.head
        this.head = new Node(value)
        this.head.next = prevHead
        this.min.headValue < value ? this.min.push(headValue) : this.min.push(value)
    }
}

Min.prototype.pop = ()=>{
    if(!this.head.next) return;
    else {
        let removedHead = this.head
        this.head = removedHead.next
        return this.min.pop()
    }
}

Min.prototype.minValue = ()=>{
    return this.min.head.value
}